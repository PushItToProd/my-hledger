#!/usr/bin/env python3.9
"""
Validate journal entries to ensure that braces are matched on virtual account
names (ex. detect "(Budget:Foo" instead of "(Budget:Foo)") and that Budget and
Expenses lines have equal balances.
"""
import csv
import io
import itertools
import shutil
import sys
from subprocess import PIPE, Popen, TimeoutExpired
from contextlib import contextmanager


@contextmanager
def run(cmd, shell=True, **kwargs):
    """
    Execute the given command using Popen, with stdout=PIPE and text=True.

    Using Popen instead of subprocess.run() provides a major performance boost,
    since we can process stdout directly without waiting for the command to run
    and its output to be read into a string.
    """
    with Popen(cmd, stdout=PIPE, text=True, shell=shell, **kwargs) as proc:
        try:
            yield proc
        finally:
            try:
                proc.kill()
            except TimeoutExpired:
                proc.wait()


def iter_transactions():
    """
    Iterate over the transactions from hledger print, returning a tuple of
    each transaction's txnidx and its lines from the CSV.
    """
    get_txnidx = lambda t: t['txnidx']
    with run("hledger print -O csv") as proc:
        reader = csv.DictReader(proc.stdout)
        for txnidx, lines in itertools.groupby(reader, key=get_txnidx):
            yield txnidx, list(lines)


def print_transaction(lines):
    """
    Given an iterable of transaction lines produced by iter_transactions(),
    print them in hledger journal format.
    """
    line = lines[0]
    date = line['date']
    status = line['status']
    description = line['description']
    print(f"{date} {status} {description}")
    if comment := line['comment']:
        print("    ;", comment)
    for line in lines:
        amount = line['amount']
        commodity = line['commodity']
        if commodity == '$':
            amount = commodity + amount
        else:
            amount = amount + ' ' + commodity
        line_status = line['posting-status']
        if line_status:
            line_status += ' '
        account = line['account']
        comment = line['posting-comment']
        if comment:
            comment = " ; " + comment

        print(f"    {account:38} {amount:>9}{comment}")


def negate(amount):
    """
    Negate a numeric string without converting it to a numeric type.

    >>> negate('100.00')
    '-100.00'
    >>> negate('-100.00')
    '100.00'
    """
    if amount.startswith('-'):
        return amount[1:]
    else:
        return '-' + amount


def validate_transaction(lines):
    """
    Given a transaction's lines from iter_transactions(), validate the
    transaction to ensure braces are matched on virtual account names (ex.
    detect "(Budget:Foo" instead of "(Budget:Foo)") and that Budget and Expenses
    lines have equal balances. Any errors encountered are yielded as strings.

    For example, the transaction below would be reported as invalid due to the
    mismatched amounts for Budget:Groceries and Expenses:Groceries (implied by
    the amount of Liabilities:Credit).

        2022-01-01 * Grocery Store
            Liabilities:Credit   $-11.00
            (Budget:Groceries)   $-10.00
            Expenses:Groceries
    """
    expenses = {}
    budgets = {}
    # TODO: clean up this messy logic
    # TODO: ensure every Expenses line has a corresponding Budget line
    try:
        for line in lines:
            account = line['account']
            amount = line['amount']
            if account.startswith('Budget:'):
                yield f"Non-virtual line for budget account '{account}' (amount: {amount})"
            if "TODO" in account:
                yield f"TODO account '{account}' needs to be replaced with a real account"
            if account.startswith('(Budget:'):
                if account[-1] != ')':
                    yield f"Missing ')' for account '{account}'"
                    # add the missing paren for ease of use
                    account += ')'
                # convert "(Budget:Foo)" to "Expenses:Foo"
                expense_account = 'Expenses:' + account[8:-1]
                if expense_amount := expenses.get(expense_account):
                    if negate(expense_amount) != amount:
                        yield f"Mismatched budget amount for {expense_account}"
                    del expenses[expense_account]
                else:
                    budgets[account[1:-1]] = amount
            elif account.startswith('Expenses:'):
                # convert "Expenses:Foo" to "(Budget:Foo)"
                budget_account = 'Budget:' + account[9:]
                if budget_amount := budgets.get(budget_account):
                    if negate(budget_amount) != amount:
                        yield f"Mismatched budget amount for {account}"
                    del budgets[budget_account]
                else:
                    expenses[account] = amount
    except:
        print("Error processing transaction")
        print_transaction(lines)
        raise


def main():
    found_errors = False
    for txnidx, lines in iter_transactions():
        errs = list(validate_transaction(lines))
        if not errs:
            continue
        found_errors = True
        print("\nErrors found for transaction!\n")
        print_transaction(lines)
        print("\nErrors:")
        for err in errs:
            print(" *", err)
    if found_errors:
        sys.exit(1)
    print("All entries passed validation")


if __name__ == '__main__':
    main()
